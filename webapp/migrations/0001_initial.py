# Generated by Django 3.2.15 on 2022-10-04 17:15

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Pathway_Meta',
            fields=[
                ('pathway_meta_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='database unit meta_data id')),
                ('species', models.CharField(max_length=10, verbose_name='current species')),
                ('name', models.CharField(max_length=20, verbose_name='current db unit name')),
                ('id_type', models.CharField(max_length=50, verbose_name='the id type of the current db unit')),
                ('update_time', models.CharField(max_length=20, verbose_name='current db unit update time')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('ek_species', models.IntegerField(primary_key=True, serialize=False, verbose_name='species in ek id')),
                ('name_short', models.CharField(max_length=5, verbose_name='charater abbreviation of current species')),
                ('name_long', models.CharField(max_length=100, verbose_name='species long latin name')),
                ('current_gtf', models.CharField(max_length=100, verbose_name='current gene annotation file in use')),
            ],
            options={
                'ordering': ['ek_species'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('jobid', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='unique id of each job received')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='time of job received')),
                ('user_email', models.EmailField(max_length=100, null=True, verbose_name='user email')),
                ('status', models.IntegerField(default=0, verbose_name='complete 1; fail 0. default 0')),
                ('list_of_workers', models.TextField(null=True, verbose_name='a list of task ids that were spawned')),
                ('species', models.CharField(max_length=10, null=True, verbose_name='the species the user is working')),
                ('options', models.CharField(max_length=256, null=True, verbose_name='the input parameters of the current job')),
                ('input_url', models.URLField(max_length=500, null=True, verbose_name='url of job input storage')),
                ('input_content', models.FileField(max_length=500, null=True, upload_to='input/', verbose_name='txt file of job input')),
                ('url', models.URLField(max_length=500, null=True, verbose_name='url of job results storage')),
                ('csv', models.FileField(max_length=500, null=True, upload_to='results/', verbose_name='csv file of job results')),
            ],
        ),
        migrations.CreateModel(
            name='Pathway',
            fields=[
                ('ek_pathway_id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='EK_PATHWAY_ID')),
                ('pathway_id', models.CharField(max_length=20, verbose_name='pathway id in corresponding db')),
                ('pathway_description', models.TextField()),
                ('pathway_meta', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.pathway_meta')),
            ],
            options={
                'ordering': ['ek_pathway_id'],
            },
        ),
        migrations.CreateModel(
            name='Involve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ek_gene', models.BigIntegerField(verbose_name='some gene identifier: human entrez for msigdb; ek_gene_id for other')),
                ('ek_pathway', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.pathway')),
            ],
        ),
        migrations.CreateModel(
            name='ID_Mapper',
            fields=[
                ('ek_gene_id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='EK_GENE_ID')),
                ('gene_id', models.CharField(max_length=50, null=True, verbose_name='ensembl gene id')),
                ('ensembl_symbol', models.CharField(max_length=50, null=True, verbose_name='ensembl symbol')),
                ('entrez_id', models.BigIntegerField(null=True, verbose_name='entrez gene id')),
                ('ncbi_symbol', models.CharField(max_length=50, null=True, verbose_name='ncbi symbol')),
                ('vgnc_id', models.CharField(max_length=50, null=True, verbose_name='vgnc id')),
                ('vgnc_symbol', models.CharField(max_length=50, null=True, verbose_name='vgnc symbol')),
                ('hgnc_orthologs', models.CharField(max_length=50, null=True, verbose_name='hgnc orthologs id')),
                ('human_gene_id', models.CharField(max_length=50, null=True, verbose_name='human ensembl gene id')),
                ('human_entrez_id', models.BigIntegerField(null=True, verbose_name='human gene entrez identifier')),
                ('hgnc_symbol', models.CharField(max_length=50, null=True, verbose_name='hgnc human orthologs gene symbol')),
                ('species', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.species')),
            ],
            options={
                'ordering': ['ek_gene_id'],
            },
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seqname', models.CharField(max_length=5, verbose_name='chromosome')),
                ('start', models.IntegerField(verbose_name='gene start coordinates')),
                ('end', models.IntegerField(verbose_name='gene end coordinates')),
                ('strand', models.CharField(max_length=1, verbose_name='strand')),
                ('gene_biotype', models.CharField(max_length=50, verbose_name='gene biotype')),
                ('ek_gene', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.id_mapper')),
                ('species', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.species')),
            ],
            options={
                'ordering': ['ek_gene'],
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.CharField(max_length=16, verbose_name='feature annotation in gtf')),
                ('start', models.IntegerField(verbose_name='feature start coordinates')),
                ('end', models.IntegerField(verbose_name='feature end coordinates')),
                ('gene_biotype', models.CharField(max_length=50, verbose_name='gene biotype')),
                ('strand', models.CharField(max_length=1, verbose_name='strand')),
                ('ek_gene', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.id_mapper')),
            ],
            options={
                'ordering': ['ek_gene'],
            },
        ),
        migrations.CreateModel(
            name='Exon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exon_id', models.CharField(max_length=20, verbose_name='ensembl exon id')),
                ('start', models.IntegerField(verbose_name='exon start coordinates')),
                ('end', models.IntegerField(verbose_name='exon end coordinates')),
                ('gene_biotype', models.CharField(max_length=50, verbose_name='gene biotype')),
                ('strand', models.CharField(max_length=1, verbose_name='strand')),
                ('transcript_id', models.TextField(verbose_name='corresponding ens transcript id')),
                ('ek_gene', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.id_mapper')),
            ],
            options={
                'ordering': ['exon_id'],
            },
        ),
        migrations.CreateModel(
            name='ComputedFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.CharField(max_length=25)),
                ('start', models.IntegerField(verbose_name='current computed feature start coordinates')),
                ('end', models.IntegerField(verbose_name='current computed feature end coordinates')),
                ('gene_biotype', models.CharField(max_length=50, null=True, verbose_name='gene biotype')),
                ('strand', models.CharField(max_length=1, null=True, verbose_name='strand')),
                ('ek_gene', models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='webapp.id_mapper')),
            ],
            options={
                'ordering': ['ek_gene'],
            },
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['seqname', 'start', 'end'], name='webapp_gene_seqname_53b857_idx'),
        ),
        migrations.AddIndex(
            model_name='feature',
            index=models.Index(fields=['ek_gene', 'start', 'end'], name='webapp_feat_ek_gene_ac4682_idx'),
        ),
        migrations.AddIndex(
            model_name='exon',
            index=models.Index(fields=['ek_gene', 'start', 'end'], name='webapp_exon_ek_gene_f9cbc5_idx'),
        ),
        migrations.AddIndex(
            model_name='computedfeatures',
            index=models.Index(fields=['ek_gene', 'start', 'end'], name='webapp_comp_ek_gene_7d92aa_idx'),
        ),
    ]
